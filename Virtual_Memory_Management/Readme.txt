					Description of disk manager
Name: Ruiyuan Jiang
Course Number: CS6456	
Title: Designing Mini File System

This program has simulated a file system by creating a file on the disk and using that file as a virtual disk. The maximum length of this virtual disk is 64 blocks and each block has 16 bytes. As this file system is very small, I use a simple layout without the inode to manage the disk. It has a super block at the first block of the system. It also holds a File Allocation Table(FAT) and Directory Table (DIR). Also, whenever the file system is mounted, an Open File Table (OFT) is created in the memory of the system. FAT, DIR and super block is the meta data of the file system.
 In my layout, block 31-63 are used as the data segmentation and the previous 32 blocks are used for metadata. I stored the FAT in block 3-6, and stored the DIR in block 7-10. The allocation information of these tables is stored in the superblock. All tables are stored as unsigned char array.
 My FAT has 32 entries which corresponds to the number of the data block and every entry needs two bytes. The first byte of every entry in FAT represents the state of the block (busy or not) and the second byte stands for the allocation (block index) of the next block needed by the file. 
My DIR Table has 8 entries as there are at most 8 files. Every entry needs 8 bytes and 64 bytes in total. DIR Tables records the state, file length, name of the file, first block for the file. I distributed 1 byte to state, two bytes to file length, 4 bytes for the name of file , and one byte to first block for the file. 
As for the OFT table, I build a two dimensional array on the memory. It has four entries as there at most 4 open file simultaneously and every entry has 3 attributes: state, file descriptor, offset. File descriptor is similar to the handle in the Linux system. And offset is similar to the file pointer. 
This program has 12 sub-functions: make_fs, mount_fs , dismount_fs, fs_open, fs_close, fs_create, fs_delete, fs_read, fs_write, fs_get_filesize, fs_lseek, and fs_truncate.  
The first three functions programmed the operation of the file system. Make_fs function creates a file and initialized the content by all 0s. 
In the mount_fs function, the metablocks of the virtual disk are read into the memory. And I stored that information on a global char array. 
In the dismount_fs function, the metablock is written back to virtual disk by the block_write function in disk.c 
The rest nine functions are used to describe the operation on the file on the disk. The routine operation contains opening file, closing file, deleting file, and modifying file. First, we create a new file by calling fs_create, it will update the DIR table, and the FAT table. When this file is opend, fs_open is called and the function will updated the OFT table in the memory. The offset is set to zero, when the file is newly created. The fs_write function will modify the content of the file. And the distribution of the block required by the file follows the FIFO principle. The routine is that at first it will look into the OFT table , find the file descriptor and fetch the allocation of the first block of that file according to the file descriptor. Secondly, it will find the free block for this file according to the FAT Table. The rest of these functions are very similar, and the most important task of these functions is to maintain and update the metadata of the file system. 

